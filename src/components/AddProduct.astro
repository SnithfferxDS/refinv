---
---

<div class="bg-white shadow-md rounded-lg p-6">
  <form id="addProductForm" class="space-y-4">
    <div>
      <label class="block text-sm font-medium text-gray-700">Name</label>
      <input type="text" name="name" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
    </div>
    
    <div>
      <label class="block text-sm font-medium text-gray-700">Description</label>
      <textarea name="description" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"></textarea>
    </div>
    
    <div>
      <label class="block text-sm font-medium text-gray-700">Price</label>
      <input type="number" name="price" step="0.01" min="0.01" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
    </div>
    
    <div>
      <label class="block text-sm font-medium text-gray-700">Initial Stock</label>
      <input type="number" name="stock" min="0" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
    </div>
    
    <button type="submit" class="w-full bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700">
      Add Product
    </button>
  </form>

  <div id="formMessage" class="mt-4 text-center hidden">
    <p class="text-green-500"></p>
  </div>
</div>

<script>
  const form = document.getElementById('addProductForm');
  const formMessage = document.getElementById('formMessage');
  
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const data = {
      name: formData.get('name'),
      description: formData.get('description') || '',
      price: parseFloat(formData.get('price')),
      stock: parseInt(formData.get('stock'))
    };
    
    try {
      const response = await fetch('http://localhost:3000/api/products', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // Show success message
      formMessage.querySelector('p').textContent = 'Product added successfully!';
      formMessage.querySelector('p').className = 'text-green-500';
      formMessage.classList.remove('hidden');
      
      // Reset form
      form.reset();

      // Refresh product list
      document.dispatchEvent(new CustomEvent('refreshProducts'));

      // Hide message after 3 seconds
      setTimeout(() => {
        formMessage.classList.add('hidden');
      }, 3000);
    } catch (error) {
      console.error('Error adding product:', error);
      formMessage.querySelector('p').textContent = 'Error adding product. Please try again.';
      formMessage.querySelector('p').className = 'text-red-500';
      formMessage.classList.remove('hidden');
    }
  });
</script>