---
import BaseLayout from "../../layouts/App.Layout.astro";
import { saveFastData } from "../api/quotations/create";
import type { FastQuotation } from "../../types/Quotation";
import { generateIdentifier } from "../../utils/functions";
import { db } from "astro:db";
import { Categories, Stores, Countries } from "astro:db";
import StoresIsland from "../../components/Quotations/Stores";

interface Props {
	quotNum: string;
}

const { quotNum = generateIdentifier("quotation") } = Astro.props;

let errorMessage = "";

if (Astro.request.method === "POST") {
	const formData = await Astro.request.formData();
	let productInput = formData.get("quotationProductName")?.toString(),
		quotNumber = quotNum,
		product_id = formData.get("product_id")?.toString(),
		category = formData.get("quotationProductType")?.toString(),
		quotationType = formData.get("quotationType")?.toString() ?? "1",
		country = formData.get("quotationCountry")?.toString(),
		store = formData.get("quotationStore")?.toString(),
		price = formData.get("quotationPrice")?.toString(),
		storeLink = formData.get("quotationLink")?.toString(),
		shipping = formData.get("quotationShipping")?.toString(),
		weight = formData.get("quotationWeight")?.toString(),
		quantity = formData.get("quotationQuantity")?.toString(),
		measure_unit = formData.get("quotationMeasureUnit")?.toString(),
		height = formData.get("quotationProductHeight")?.toString(),
		width = formData.get("quotationProductWidth")?.toString(),
		length = formData.get("quotationProductLength")?.toString(),
		delivery = formData.get("quotationDeliveryDate")?.toString();
	if (!productInput)
		return new Response("El producto es requerida", { status: 400 });
	if (!price && price !== "0")
		return new Response("El precio es requerido", { status: 400 });
	if (quotationType !== undefined && quotationType === "2") {
		if (!category)
			return new Response("La categoría es requerida", { status: 400 });
		if (!store)
			return new Response("La tienda es requerida", { status: 400 });
		if (!country)
			return new Response("El país es requerida", { status: 400 });
	}
	if (quotNumber === undefined || quotNumber === "") {
		return new Response("El número de cotización es requerido", {
			status: 400,
		});
	}
	let data: FastQuotation = {
		product: product_id ? parseInt(product_id) : productInput,
		category_id: category ? parseInt(category) : 0,
		link: storeLink ?? "",
		store_id: store ? parseInt(store) : 0,
		country_id: country ? parseInt(country) : 0,
		quotation_date: delivery ? new Date(delivery) : new Date(),
		price: parseFloat(price),
		shipping: shipping ? parseFloat(shipping) : 0,
		weight: weight ? parseFloat(weight) : 0,
		quantity: quantity ? parseInt(quantity) : 0,
		measure_unit: measure_unit ?? "gr",
		height: height ? parseFloat(height) : 0,
		width: width ? parseFloat(width) : 0,
		length: length ? parseFloat(length) : 0,
		number: quotNumber,
		weight_unit: formData.get("quotationWeightUnit")?.toString(),
		images: formData.get("quotationImages")?.toString().split(",") ?? [""],
		importType: parseInt(quotationType),
	};
	const result = await saveFastData(data);
	if (result !== undefined) {
		return Astro.redirect(`/quotations/${result.id}/edit`);
	} else {
		return new Response(result.message, { status: 400 });
	}
}

const stores = await db
	.select({ id: Stores.id, name: Stores.name })
	.from(Stores);
const countries = await db
	.select({ id: Countries.id, name: Countries.name })
	.from(Countries);
const categories = await db
	.select({ id: Categories.id, name: Categories.name })
	.from(Categories);
const weightUnits = [
	{ value: "g", name: "g" },
	{ value: "oz", name: "Oz" },
	{ value: "lb", name: "lb" },
	{ value: "kg", name: "kg" },
	{ value: "kb", name: "kb" },
	{ value: "MB", name: "MB" },
	{ value: "GB", name: "GB" },
];
const measureUnits = [
	{ value: "mm", name: "mm" },
	{ value: "cm", name: "cm" },
	{ value: "in", name: "in" },
	{ value: "ft", name: "ft" },
	{ value: "m", name: "m" },
];
---

<BaseLayout title="Quotations | create">
	<div class="mx-auto">
		<div class="sm:flex sm:items-center">
			<div class="sm:flex-auto">
				<h1
					class="text-2xl font-semibold text-gray-900 dark:text-white"
				>
					Cotización Rápida #<span class="font-semibold text-info-600"
						>{quotNum}</span
					>
				</h1>
				{
					errorMessage && (
						<div
							class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative"
							role="alert"
						>
							<span class="block sm:inline">{errorMessage}</span>
						</div>
					)
				}
			</div>
		</div>
		<div class="mt-8 flex flex-col">
			<form method="POST" class="space-y-6">
				<section class="flex flex-col">
					<div class="overflow-x-auto">
						<div
							class="relative shadow-md sm:rounded-lg bg-gray-50 dark:bg-gray-800"
						>
							<div
								class="p-4 space-y-3 md:space-y-0 md:space-x-4 overflow-hidden"
							>
								<div class="grid grid-cols-12 gap-4">
									<div class="col-span-12 sm:col-span-4">
										<div
											class="max-w-sm bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700"
										>
											<img
												class="rounded-t-lg w-full"
												src="/img/photo_not_available.png"
												alt="asset photo"
											/>
											<div
												class="p-5 flex flex-col items-center"
											>
												<p
													class="mb-3 font-normal text-gray-700 dark:text-gray-400"
												>
													Sin Imagen
												</p>
												<a
													href="#"
													class="inline-flex items-center px-3 py-2 text-sm font-semibold text-center text-white bg-warning-500 rounded-lg hover:bg-warning-600 focus:ring-4 focus:outline-none focus:ring-warning-600 dark:bg-warning-400 dark:hover:bg-warning-500 dark:focus:ring-warning-300"
												>
													Agregar
													<svg
														class="rtl:rotate-180 w-5 h-5 ms-2"
														aria-hidden="true"
														xmlns="http://www.w3.org/2000/svg"
														fill="none"
														viewBox="0 0 14 10"
													>
														<svg
															class="w-6 h-6"
															aria-hidden="true"
															xmlns="http://www.w3.org/2000/svg"
															fill="none"
															viewBox="0 0 20 18"
														>
															<path
																stroke="currentColor"
																stroke-linecap="round"
																stroke-linejoin="round"
																stroke-width="2"
																d="M10 12.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Z"
															></path>
															<path
																stroke="currentColor"
																stroke-linecap="round"
																stroke-linejoin="round"
																stroke-width="2"
																d="M17 3h-2l-.447-.894A2 2 0 0 0 12.764 1H7.236a2 2 0 0 0-1.789 1.106L5 3H3a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V5a2 2 0 0 0-2-2Z"
															>
															</path>
														</svg>
													</svg>
												</a>
											</div>
										</div>
									</div>
									<div class="col-span-12 sm:col-span-8">
										<div class="grid grid-cols-12 gap-4">
											<div
												class="col-span-12 sm:col-span-12 md:col-span-8 lg:col-span-6"
											>
												<label
													for="quotationProductName"
													class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
													>Nombre</label
												>
												<input
													type="text"
													name="quotationProductName"
													id="quotationProductName"
													class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
													placeholder="Nombre del Producto"
													required=""
												/>
												<input
													type="hidden"
													name="product_id"
													id="product_id"
												/>
											</div>

											<div
												class="col-span-12 md:col-span-4 lg:col-span-6"
											>
												<label
													for="quotationType"
													class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
													>Tipo de Cotización</label
												>
												<select
													id="quotationType"
													name="quotationType"
													class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2"
												>
													<option
														value="0"
														selected=""
														>-- Seleccionar Tipo de
														Cotización --</option
													>

													<option value="1">
														Nacional
													</option>
													<option value="2">
														Internacional
													</option>
													<option value="3"
														>Personal</option
													>
												</select>
											</div>

											<div
												class="col-span-12 md:col-span-4 lg:col-span-6"
											>
												<label
													for="quotationProductType"
													class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
													>Tipo de Producto</label
												>
												<select
													id="quotationProductType"
													name="quotationProductType"
													class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2"
												>
													<option
														value="0"
														selected=""
														>-- Seleccionar Tipo de
														Producto --</option
													>
													{
														categories.map(
															(category) => (
																<option
																	value={
																		category.id
																	}
																>
																	{
																		category.name
																	}
																</option>
															),
														)
													}
												</select>
											</div>

											<StoresIsland client:only />

											<!-- Internacional -->
											<div
												class="hidden col-span-12 md:col-span-6 lg:col-span-6 importation"
											>
												<label
													for="quotationLink"
													class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
													>Enlace</label
												>
												<input
													type="text"
													name="quotationLink"
													id="quotationLink"
													class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
													placeholder="Enlace del Producto"
												/>
											</div>

											<div
												class="hidden col-span-12 md:col-span-6 lg:col-span-4 importation"
											>
												<label
													for="quotationCountry"
													class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
													>País Origen</label
												>
												<select
													id="quotationCountry"
													name="quotationCountry"
													class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2"
												>
													<option
														value="0"
														selected=""
														>-- Seleccionar País --</option
													>

													<option value="1">
														Indiferente
													</option>
													{
														countries.map(
															(country) => (
																<option
																	value={
																		country.id
																	}
																>
																	{
																		country.name
																	}
																</option>
															),
														)
													}
												</select>
											</div>

											<div
												class="hidden col-span-12 md:col-span-6 lg:col-span-4 importation"
											>
												<label
													for="quotationDeliveryDate"
													class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
													>Fecha de entrega</label
												>
												<input
													type="date"
													name="quotationDeliveryDate"
													id="quotationDeliveryDate"
													class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
													placeholder="Fecha de Entrega"
												/>
											</div>
											<!-- /Internacional -->

											<div
												class="col-span-12 md:col-span-3 lg:col-span-3"
											>
												<label
													for="quotationPrice"
													class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
													>Precio</label
												>
												<input
													type="number"
													name="quotationPrice"
													id="quotationPrice"
													class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
													min="0"
													step="0.01"
													placeholder="0.00"
													value="0"
												/>
											</div>

											<div
												class="hidden col-span-12 sm:col-span-4 md:col-span-3 lg:col-span-3 importation"
											>
												<label
													for="quotationShipping"
													class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
													>Envío</label
												>
												<input
													type="number"
													name="quotationShipping"
													id="quotationShipping"
													class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
													min="0"
													step="0.01"
													placeholder="0.00"
													value="0"
												/>
											</div>

											<div
												class="col-span-12 sm:col-span-4 md:col-span-3 lg:col-span-3"
											>
												<label
													for="quotationQuantity"
													class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
													>Cantidad</label
												>
												<input
													type="number"
													name="quotationQuantity"
													id="quotationQuantity"
													class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
													min="0"
													step="1"
													placeholder="0"
													value="0"
												/>
											</div>

											<!-- Measure checkbox -->
											<div
												class="col-span-12 sm:col-span-6 lg:col-span-4"
											>
												<label
													class="inline-flex items-center mb-2 cursor-pointer"
												>
													<input
														id="measureWeight"
														type="checkbox"
														value=""
														class="sr-only peer"
													/>
													<div
														class="relative
                                                    w-11
                                                    h-6
                                                    bg-red-500 peer peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-gray-300 peer-checked:after:translate-x-full peer-checked:after:border-white peer-checked:bg-green-600 rounded-full rtl:peer-checked:after:-translate-x-full after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:w-5 after:h-5 after:transition-all dark:peer-focus:ring-gray-800 dark:bg-red-700 dark:border-gray-600"
													>
													</div>
													<span
														class="ms-3 text-sm font-medium text-gray-400 dark:text-gray-500"
													>
														Peso
													</span>
												</label>
												<label
													class="inline-flex items-center mb-2 cursor-pointer"
												>
													<input
														id="measureVolumetric"
														type="checkbox"
														value=""
														class="sr-only peer"
													/>
													<div
														class="relative
                                                    w-11
                                                    h-6
                                                    bg-red-500 peer peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-gray-300 peer-checked:after:translate-x-full peer-checked:after:border-white peer-checked:bg-green-600 rounded-full rtl:peer-checked:after:-translate-x-full after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:w-5 after:h-5 after:transition-all dark:peer-focus:ring-gray-800 dark:bg-red-700 dark:border-gray-600"
													>
													</div>
													<span
														class="ms-3 text-sm font-medium text-gray-400 dark:text-gray-500"
													>
														Dimensiones
													</span>
												</label>
											</div>
											<!--  -->

											<!-- If Knowing the Weight -->
											<div
												class="hidden col-span-12 sm:col-span-6 lg:col-span-4 weight"
											>
												<label
													for="quotationWeight"
													class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
													>Peso</label
												>
												<div class="relative">
													<input
														type="text"
														name="quotationWeight"
														id="quotationWeight"
														class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
														min="0"
														step="0.01"
														placeholder="0.00"
													/>
													<div
														class="absolute inset-y-0 end-0 flex items-center"
													>
														<select
															id="quotationWeightUnit"
															name="quotationWeightUnit"
															class="bg-gray-50 border text-center border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
														>
															{
																weightUnits.map(
																	(unit) => (
																		<option
																			value={
																				unit.value
																			}
																		>
																			{
																				unit.name
																			}
																		</option>
																	),
																)
															}
														</select>
													</div>
												</div>
											</div>
											<!-- IF not knowing the weight -->
											<div
												class="col-span-12 sm:col-span-6 lg:col-span-4 hidden volumetric"
											>
												<label
													for="quotationProductWidth"
													class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
													>Ancho</label
												>
												<div class="relative">
													<input
														type="text"
														name="quotationProductWidth"
														id="quotationProductWidth"
														class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
														min="0"
														step="0.01"
														placeholder="0.00"
													/>
													<div
														class="absolute inset-y-0 end-0 flex items-center"
													>
														<select
															id="quotationProductWidthUnit"
															name="quotationProductWidthUnit"
															class="bg-gray-50 border text-center border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
														>
															{
																measureUnits.map(
																	(unit) => (
																		<option
																			value={
																				unit.value
																			}
																		>
																			{
																				unit.name
																			}
																		</option>
																	),
																)
															}
														</select>
													</div>
												</div>
											</div>

											<div
												class="col-span-12 sm:col-span-6 lg:col-span-4 hidden volumetric"
											>
												<label
													for="quotationProductHeight"
													class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
													>Altura</label
												>
												<div class="relative">
													<input
														type="text"
														name="quotationProductHeight"
														id="quotationProductHeigth"
														class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
														min="0"
														step="0.01"
														placeholder="0.00"
													/>
													<div
														class="absolute inset-y-0 end-0 flex items-center"
													>
														<select
															id="quotationProductHeightUnit"
															name="quotationProductHeightUnit"
															class="bg-gray-50 border text-center border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
														>
															{
																measureUnits.map(
																	(unit) => (
																		<option
																			value={
																				unit.value
																			}
																		>
																			{
																				unit.name
																			}
																		</option>
																	),
																)
															}
														</select>
													</div>
												</div>
											</div>

											<div
												class="col-span-12 sm:col-span-6 lg:col-span-4 hidden volumetric"
											>
												<label
													for="quotationProductLength"
													class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
													>Largo</label
												>
												<div class="relative">
													<input
														type="text"
														name="quotationProductLength"
														id="quotationProductLength"
														class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
														min="0"
														step="0.01"
														placeholder="0.00"
													/>
													<div
														class="absolute inset-y-0 end-0 flex items-center"
													>
														<select
															id="quotationProductLengthUnit"
															name="quotationProductLengthUnit"
															class="bg-gray-50 border text-center border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
														>
															{
																measureUnits.map(
																	(unit) => (
																		<option
																			value={
																				unit.value
																			}
																		>
																			{
																				unit.name
																			}
																		</option>
																	),
																)
															}
														</select>
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</section>
				<div>
					<button
						type="submit"
						class="inline-flex justify-center rounded-md border border-transparent bg-secondary-400 py-2 px-4 text-sm font-medium text-gray-100 shadow-sm hover:bg-secondary-500 focus:outline-none focus:ring-2 focus:ring-secondary-500 focus:ring-offset-2"
					>
						Crear Cotización
					</button>
				</div>
			</form>
		</div>
	</div>
</BaseLayout>

<script type="module" is:inline>
	// import { getStores } from "../api/quotations/stores.js";

	// const storeSelect = document.getElementById("quotationStore");
	let quotationType = document.getElementById("quotationType"),
		measureWeight = document.getElementById("measureWeight"),
		measureVolume = document.getElementById("measureVolumetric"),
		importacion = document.querySelectorAll(".importation"),
		volumetric = document.querySelectorAll(".volumetric");
	weight = document.querySelectorAll(".weight");

	quotationType.addEventListener("change", (e) => {
		// const stores = getStores(e.target.value);
		// stores.forEach((store) => {
		// 	const option = document.createElement("option");
		// 	option.value = store.id;
		// 	option.textContent = store.name;
		// 	storeSelect.appendChild(option);
		// 	if (store.id === 1) {
		// 		storeSelect.value = store.id;
		// 	}
		// });
		if (e.target.value === "2" || e.target.value === 2) {
			importacion.forEach((element) => {
				element.classList.remove("hidden");
				element.classList.add("block");
			});
		} else {
			importacion.forEach((element) => {
				element.classList.remove("block");
				element.classList.add("hidden");
			});
		}
	});

	measureVolume.addEventListener("click", (e) => {
		if (e.target.checked) {
			volumetric.forEach((element) => {
				element.classList.remove("hidden");
				element.classList.add("block");
			});
		} else {
			volumetric.forEach((element) => {
				element.classList.remove("block");
				element.classList.add("hidden");
			});
		}
	});

	measureWeight.addEventListener("click", (e) => {
		if (e.target.checked) {
			weight.forEach((element) => {
				element.classList.remove("hidden");
				element.classList.add("block");
			});
		} else {
			weight.forEach((element) => {
				element.classList.remove("block");
				element.classList.add("hidden");
			});
		}
	});
</script>
